{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "34cc79fb-7c17-42e6-a95f-f70dab7488cd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'\\nTwo-Body System Analysis\\nInvestigating the central mass in Omega Centauri\\n'"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"\n",
    "Two-Body System Analysis\n",
    "Investigating the central mass in Omega Centauri\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "70855163-ae3a-4911-85ea-bf97259bffb5",
   "metadata": {},
   "outputs": [],
   "source": [
    "from __future__ import print_function, division\n",
    "import numpy as np\n",
    "import matplotlib.pylab as plt\n",
    "from PyAstronomy import pyasl\n",
    "import two_body_utils as utils\n",
    "import astropy.units as u\n",
    "import astropy.constants as const\n",
    "import pandas as pd\n",
    "import matplotlib.lines as mlines\n",
    "from astropy.table import Table\n",
    "from datetime import datetime"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "7b8e7b4f-25b2-46e4-88de-d88d8bfec4ea",
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "module 'two_body_utils' has no attribute 'circular_period'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[3], line 6\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[0;32m      2\u001b[0m \u001b[38;5;124;03m#Single Orbital Plot\u001b[39;00m\n\u001b[0;32m      3\u001b[0m \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[0;32m      5\u001b[0m \u001b[38;5;66;03m# Get a sample period in seconds\u001b[39;00m\n\u001b[1;32m----> 6\u001b[0m per_sample \u001b[38;5;241m=\u001b[39m utils\u001b[38;5;241m.\u001b[39mcircular_period(semi_major \u001b[38;5;241m=\u001b[39m utils\u001b[38;5;241m.\u001b[39msemi_major_sample, speed \u001b[38;5;241m=\u001b[39m utils\u001b[38;5;241m.\u001b[39mv_xyz_sample) \n\u001b[0;32m      8\u001b[0m \u001b[38;5;66;03m#Calculate a single orbit -- No units in arguments\u001b[39;00m\n\u001b[0;32m      9\u001b[0m kes \u001b[38;5;241m=\u001b[39m pyasl\u001b[38;5;241m.\u001b[39mKeplerEllipse(a \u001b[38;5;241m=\u001b[39m utils\u001b[38;5;241m.\u001b[39msemi_major_sample\u001b[38;5;241m.\u001b[39mvalue, per\u001b[38;5;241m=\u001b[39m per_sample\u001b[38;5;241m.\u001b[39mvalue, e \u001b[38;5;241m=\u001b[39m utils\u001b[38;5;241m.\u001b[39me[\u001b[38;5;241m0\u001b[39m], Omega\u001b[38;5;241m=\u001b[39m utils\u001b[38;5;241m.\u001b[39mOmega, \n\u001b[0;32m     10\u001b[0m                              i\u001b[38;5;241m=\u001b[39m utils\u001b[38;5;241m.\u001b[39mi, w\u001b[38;5;241m=\u001b[39mutils\u001b[38;5;241m.\u001b[39mw)\n",
      "\u001b[1;31mAttributeError\u001b[0m: module 'two_body_utils' has no attribute 'circular_period'"
     ]
    }
   ],
   "source": [
    "\"\"\"\n",
    "#Single Orbital Plot\n",
    "\"\"\"\n",
    "\n",
    "# Get a sample period in seconds\n",
    "per_sample = utils.circular_period(semi_major = utils.semi_major_sample, speed = utils.v_xyz_sample) \n",
    "\n",
    "#Calculate a single orbit -- No units in arguments\n",
    "kes = pyasl.KeplerEllipse(a = utils.semi_major_sample.value, per= per_sample.value, e = utils.e[0], Omega= utils.Omega, \n",
    "                             i= utils.i, w=utils.w)\n",
    "\n",
    "# Get a time axis\n",
    "# No units in arguments\n",
    "# np.linspace(start,stop,num)\n",
    "t = np.linspace(utils.tau, per_sample.value, utils.n_int) * 86400\n",
    "\n",
    "# Calculate the orbit position at the given points in a Cartesian coordinate system.\n",
    "pos = kes.xyzPos(t)\n",
    "\n",
    "# Calculate the orbit radius \n",
    "radius = kes.radius(t)\n",
    "\n",
    "# Calculate velocity on orbit\n",
    "vel = kes.xyzVel(t)\n",
    "\n",
    "# Find the nodes of the orbit (Observer at -z)\n",
    "ascn, descn = kes.xyzNodes_LOSZ()\n",
    "# Plot x and y coordinates of the orbit\n",
    "plt.subplot(2, 1, 1)\n",
    "plt.title(\"Periapsis (red diamond), Asc. node (green circle), desc. node (red circle)\")\n",
    "plt.xlabel(\"East ->\")\n",
    "plt.ylabel(\"North ->\")\n",
    "plt.plot([0], [0], 'k+', markersize=9)\n",
    "plt.plot(pos[::, 1], pos[::, 0], 'bp')\n",
    "# Point of periapsis\n",
    "plt.plot([pos[0, 1]], [pos[0, 0]], 'rd')\n",
    "# Nodes of the orbit\n",
    "plt.plot([ascn[1]], [ascn[0]], 'go', markersize=10)\n",
    "plt.plot([descn[1]], [descn[0]], 'ro', markersize=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "24e81f03-3bc7-495d-9085-ba3673628149",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\"\"\"\n",
    "#Single Binary Orbit Plots\n",
    "\"\"\"\n",
    "\n",
    "\n",
    "# Get a sample period in seconds\n",
    "per_sample = utils.circular_period(semi_major = utils.semi_major_sample, speed = utils.v_xyz_sample) \n",
    "\n",
    "# Calculate a single binary orbit\n",
    "# no units in arguments \n",
    "bo = pyasl.BinaryOrbit(utils.m2m1, utils.mtot, per_sample.value, utils.e[0], \n",
    "                       utils.tau, utils.Omega, utils.w, utils.i)\n",
    "\n",
    "# Get a time axis\n",
    "# No units in arguments!\n",
    "# np.linspace(start,stop,num)\n",
    "t = np.linspace(utils.tau, per_sample.value, utils.n_int) * 86400\n",
    "\n",
    "# Calculate primary and secondary orbit\n",
    "ke1 = bo.getKeplerEllipse_primary()\n",
    "ke2 = bo.getKeplerEllipse_secondary()\n",
    "\n",
    "# velocities and radii of single orbit\n",
    "r1s, r2s = bo.xyzPos(t)\n",
    "v1s, v2s = bo.xyzVel(t)\n",
    "\n",
    "# Relative distance of masses (centers) of single orbit\n",
    "rds = np.sqrt(np.sum((r1s-r2s)**2, axis=1))\n",
    "\n",
    "#Plot binary orbit\n",
    "plt.subplot(2,1,1)\n",
    "plt.plot(r1s[::,0], r1s[::,1], 'b.-', label=\"Primary orbit\")\n",
    "plt.plot(r2s[::,0], r2s[::,1], 'r.-', label=\"Secondary orbit\")\n",
    "plt.xlabel(\"x [m]\")\n",
    "plt.ylabel(\"y [m]\")\n",
    "plt.legend()\n",
    "plt.show()\n",
    "print()\n",
    "print()\n",
    "\n",
    "#Plot relative distances\n",
    "plt.subplot(2,1,2)\n",
    "plt.plot(t/86400, rds, 'b.-', label=\"Relative distance\")\n",
    "plt.axvline(utils.tau, ls=':', c='k', label=\"Time of periastron\")\n",
    "plt.xlabel(\"Time [days]\")\n",
    "plt.ylabel(\"Relative Distance [m]\")\n",
    "plt.legend()\n",
    "plt.show()\n",
    "print()\n",
    "print()\n",
    "\n",
    "# plot x-velocity\n",
    "plt.subplot(3,1,1)\n",
    "plt.plot(t/86400, v1s[::,0]/1e3, 'b.-', label=\"Primary\")\n",
    "plt.plot(t/86400, v2s[::,0]/1e3, 'r.-', label=\"Secondary\")\n",
    "plt.xlabel(\"Time [days]\")\n",
    "plt.ylabel(\"vx [km/s]\")\n",
    "plt.legend()\n",
    "plt.show()\n",
    "print()\n",
    "\n",
    "# plot y-velocity\n",
    "plt.subplot(3,1,2)\n",
    "plt.plot(t/86400, v1s[::,1]/1e3, 'b.-', label=\"Primary\")\n",
    "plt.plot(t/86400, v2s[::,1]/1e3, 'r.-', label=\"Secondary\")\n",
    "plt.xlabel(\"Time [days]\")\n",
    "plt.ylabel(\"vy [km/s]\")\n",
    "plt.legend()\n",
    "plt.show()\n",
    "print()\n",
    "\n",
    "# plot orbit velocities\n",
    "plt.subplot(3,1,3)\n",
    "ov1s = np.sqrt(np.sum(v1s**2, axis=1))\n",
    "ov2s = np.sqrt(np.sum(v2s**2, axis=1))\n",
    "plt.plot(t/86400, ov1s/1e3, 'b.-', label=\"Primary\")\n",
    "plt.plot(t/86400, ov2s/1e3, 'r.-', label=\"Secondary\")\n",
    "plt.xlabel(\"Time [days]\")\n",
    "plt.ylabel(\"XYZ Orbit velocity [km/s]\")\n",
    "plt.legend()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e3325fee-8b2c-4614-9dbe-b10208a2d275",
   "metadata": {},
   "outputs": [],
   "source": [
    "# \"\"\"\n",
    "# Binary System Calculations with KeplerEllipse \n",
    "# \"\"\"\n",
    "# eccentricities \n",
    "# 100 random eccentricities from the thermal distribution \n",
    "# The CDF (F(e)) gives probability\n",
    "# The inverse CDF turns uniform random samples into samples that match probability density\n",
    "# f(e) = 2e, so more eccentric orbits are more likely than circular\n",
    "# u=F(e)=e, each proability value is equally likely and maps to some value of e \n",
    "p = np.random.uniform(0, 1, utils.n_int)\n",
    "ecc_distribution_ke = np.sqrt(p)\n",
    "\n",
    "#Solver for Kepler's equation\n",
    "# Solves Kepler's Equation for a set\n",
    "# of mean anomaly and eccentricity.\n",
    "ks = pyasl.MarkleyKESolver()\n",
    "print(\"Eccentric anomalies: \\n\",ks.getE(utils.M, ecc_distribution_ke))\n",
    "\n",
    "# # Get a sample period in seconds\n",
    "per_sample = utils.circular_period(semi_major = utils.semi_major_sample, speed = utils.v_xyz_sample) \n",
    "\n",
    "# Get a time axis of units based on input\n",
    "# No units in arguments\n",
    "# np.linspace(start,stop,num)\n",
    "t = np.linspace(utils.tau, per_sample.value, utils.n_int)\n",
    "\n",
    "# Initialize empty arrays \n",
    "positions = np.zeros((len(ecc_distribution_ke), len(t), 3))  \n",
    "velocities = np.zeros_like(positions)\n",
    "radii = np.zeros((len(ecc_distribution_ke), len(t)))\n",
    "\n",
    "# Loop over each eccentricity and timestep and calculate position, velocity, radius\n",
    "for k, e_val in enumerate(ecc_distribution_ke):\n",
    "     # Calculate the ellipse for each value of eccentricity --- No units in arguments! -- output units depend on input\n",
    "      ke = pyasl.KeplerEllipse(a = utils.semi_major_sample.value, per = per_sample.value, e = e_val, Omega= utils.Omega, \n",
    "                               i= utils.i, w=utils.w)\n",
    "\n",
    "      for j, time in enumerate(t):\n",
    "          positions[k, j] = ke.xyzPos(time)\n",
    "          velocities[k, j] = ke.xyzVel(time)\n",
    "          radii[k, j] = ke.radius(time)\n",
    "\n",
    "# Get magnitudes of xyz velocities\n",
    "velocities_magnitudes = np.linalg.norm(velocities[:,:, :2], axis=2) \n",
    "\n",
    "# Print results\n",
    "print(\"\\nShape of output array: \", positions.shape, \"\\n\")\n",
    "print(\"Units of output correspond to input:\",utils.semi_major_sample.unit,\"and\", per_sample.unit, \"\\n\")\n",
    "print(\"x, y, z velocities for the\", utils.n_int, \"timesteps and eccentricites: \\n\", velocities[:,:, :: ])\n",
    "print(\"\\n\\nCorresponding Magnitudes:\\n\", velocities_magnitudes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "a18c2b0d-e3e9-468b-986b-da219f27a5d0",
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "module 'two_body_utils' has no attribute 'circular_period'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[7], line 2\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[38;5;66;03m# Get sample orbital period (in seconds) using circular orbit approximation\u001b[39;00m\n\u001b[1;32m----> 2\u001b[0m per_sample \u001b[38;5;241m=\u001b[39m utils\u001b[38;5;241m.\u001b[39mcircular_period(semi_major\u001b[38;5;241m=\u001b[39mutils\u001b[38;5;241m.\u001b[39msemi_major_sample, speed\u001b[38;5;241m=\u001b[39mutils\u001b[38;5;241m.\u001b[39mv_xyz_sample)\n",
      "\u001b[1;31mAttributeError\u001b[0m: module 'two_body_utils' has no attribute 'circular_period'"
     ]
    }
   ],
   "source": [
    "# Get sample orbital period (in seconds) using circular orbit approximation\n",
    "per_sample = utils.circular_period(semi_major=utils.semi_major_sample, speed=utils.v_xyz_sample)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ed83dba6-4cac-4b5f-ab3f-56e4ba72ff44",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
